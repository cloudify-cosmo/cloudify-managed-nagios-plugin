tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://cloudify.co/spec/cloudify/6.3.0/types.yaml
  - plugin:cloudify-aws-plugin
  - plugin:cloudify-utilities-plugin?version= >=1.22.1
  - plugin:cloudify-managed-nagios-plugin
  - plugin:cloudify-nagiosrest-plugin
  # - plugin:arbitrary-command-plugin

inputs:

  aws_subnet_id:
    type: string

  aws_security_group_id:
    type: string

  aws_region_name:
      type: string
      default: 'eu-west-1'
      constraints:
        - valid_values:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - eu-central-1
            - eu-west-1
            - eu-west-2
            - eu-south-1
            - eu-west-3
            - eu-north-1
            - af-south-1
            - ap-east-1
            - ap-south-1
            - ap-northeast-3
            - ap-northeast-2
            - ap-southeast-1
            - ap-southeast-2
            - ap-northeast-1
            - ca-central-1
            - cn-north-1
            - cn-northwest-1
            - me-south-1
            - sa-east-1

  instance_type:
    type: string
    default: t2.medium
    constraints:
      - valid_values:
          - t2.micro
          - t2.small
          - t2.medium
          - t2.large
          - t2.xlarge
          - t2.2xlarge

  vm_key_name:
    type: string
    default: nagios-key-base-update

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: 'centos'

  agent_key_name:
    type: string
    default: agent_key

  env_name:
    type: string
    description: Control parameters for names in resources.
    default: 'example'



dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_input: aws_region_name }

node_types:
  monitoredvm:
    derived_from: cloudify.nodes.aws.ec2.Instances
    properties:
      nagiosrest_monitoring:
        type: cloudify.datatypes.nagiosrest.Properties
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install: scripts/snmpv3_install
      cloudify.interfaces.monitoring:
        start: nagiosrest.nagiosrest_plugin.tasks.add_monitoring
        stop: nagiosrest.nagiosrest_plugin.tasks.remove_monitoring


node_templates:

  vm_keypair:
    type: cloudify.nodes.aws.ec2.Keypair
    properties:
      client_config: *client_config
      resource_config:
        KeyName: { get_input: vm_key_name }
        PublicKeyMaterial: { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key


  base_trap_host:
    type: monitoredvm
    instances:
      deploy: 1
    properties:
      agent_config:
        user: { get_input: agent_user }
        install_method: remote
        port: 22
        key: { get_secret: agent_key_private }
      resource_config:
        ImageId: { get_attribute: [ ami, aws_resource_id ] }
        InstanceType: { get_input: instance_type }
        kwargs:
          UserData: { get_attribute: [ cloud_init, cloud_config ] }
          KeyName: { get_input: vm_key_name }
          TagSpecifications:
            - ResourceType: instance
              Tags:
                - Key: Name
                  Value: { get_input: env_name }
        use_public_ip: true
        cloudify_tagging: true
        nagiosrest_monitoring:
          target_type: basic_trap_instance_type
          address: { get_secret: nagiosrest_address }
          certificate: { get_secret: nagiosrest_certificate }
          username: { get_secret: nagiosrest_user }
          password: { get_secret: nagiosrest_pass }
        relationships:
          - type: cloudify.relationships.depends_on
            target: ami
          - type: cloudify.relationships.depends_on
            target: nic
          - type: cloudify.relationships.depends_on
            target: ip
          - type: cloudify.relationships.depends_on
            target: cloud_init
          - type: cloudify.relationships.depends_on
            target: vm_keypair

  ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - CentOS 7.7.1908 x86_64 with cloud-init (HVM)
          - Name: owner-id
            Values:
            - 057448758665
      client_config: *client_config

  ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: nic

  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by cloudify-getting-started-example.
          SubnetId: { get_input: aws_subnet_id }
          Groups:
          - { get_input: aws_security_group_id }

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
        - name: { get_input: agent_user }
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          ssh-authorized-keys:
          - { get_attribute: [agent_key, public_key_export] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: agent_key

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: { get_input: agent_key_name }
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true


  # command:
  #   type: cloudify.arbitrary_commands.nodes.executor
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: base_value_host

outputs:
  internal_address:
    description: Internal nagios address
    value: { get_attribute: [base_value_host, private_ip_address] }
