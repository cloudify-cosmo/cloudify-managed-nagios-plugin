#! /usr/bin/env python
from __future__ import print_function
import os
import sys
import time

# Only handle values under CLOUDIFY-TEST-MIB::cloudifyTestValues
OID_BASE = ".1.3.6.1.4.1.52312.0.2"


def print_output(oid, val_type, value):
    print(oid)
    print(val_type)
    print(value)


def print(output):
    sys.stdout.write('%s\n' % output)
    sys.stdout.flush()


mode = None
while True:
    try:
        line = raw_input().rstrip()
    except EOFError:
        break

    if line == 'PING':
        print('PONG')
        mode = None
        continue

    if not mode:
        if line in ('get', 'getnext'):
            mode = line
        else:
            # We shouldn't get here if net-snmpd is well behaved
            # (unless I bugged this)
            print('NONE')
        continue

    if not line.startswith(OID_BASE):
        # Not an OID we handle
        print('NONE')
        mode = None
        continue

    if len(line) == len(OID_BASE):
        oid_last_id = 0
    else:
        oid_last_id = int(line.split('.')[-1])

    if mode == 'getnext':
        oid_last_id += 1

    output_vals = None
    if oid_last_id == 0:
        print('NONE')
    elif oid_last_id == 1:
        value = 0
        if os.path.exists('/tmp/cloudifytestinteger'):
            with open('/tmp/cloudifytestinteger') as inthandle:
                value = int(inthandle.read().rstrip())
        output_vals = (
            OID_BASE + '.1',
            'integer',
            value
        )
    elif oid_last_id == 2:
        # Test counter
        change_points = {}
        if os.path.exists('/tmp/cloudifytestcounter'):
            with open('/tmp/cloudifytestcounter') as changes_handle:
                for line in changes_handle.readlines():
                    change_time, new_rate = line.rstrip().split(':')
                    change_points[int(change_time)] = float(new_rate)

        ordered_changes = sorted(change_points.keys())
        current_time = time.time()
        ordered_changes = [change for change in ordered_changes
                           if change < current_time]
        ordered_changes.append(current_time)

        counter = 0
        working_time = 0
        working_rate = 0.5
        for change_time in ordered_changes:
            diff = change_time - working_time
            diff *= working_rate
            counter += diff

            working_rate = change_points.get(change_time)
            working_time = change_time

        value = int(counter)
        output_vals = (
            OID_BASE + '.2',
            'counter64',
            value
        )
    else:
        print('NONE')

    if output_vals:
        print_output(*output_vals)
    mode = None
